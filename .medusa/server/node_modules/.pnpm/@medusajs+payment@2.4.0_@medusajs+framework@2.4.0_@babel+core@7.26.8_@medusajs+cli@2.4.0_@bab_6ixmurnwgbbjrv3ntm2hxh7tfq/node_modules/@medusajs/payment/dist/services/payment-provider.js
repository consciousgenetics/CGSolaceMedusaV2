"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PaymentProviderService_logger;
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@medusajs/framework/utils");
const _models_1 = require("../models");
const os_1 = require("os");
class PaymentProviderService extends utils_1.ModulesSdkUtils.MedusaInternalService(_models_1.PaymentProvider) {
    constructor(container) {
        super(container);
        _PaymentProviderService_logger.set(this, void 0);
        __classPrivateFieldSet(this, _PaymentProviderService_logger, container["logger"]
            ? container.logger
            : console, "f");
    }
    retrieveProvider(providerId) {
        try {
            return this.__container__[providerId];
        }
        catch (err) {
            if (err.name === "AwilixResolutionError") {
                const errMessage = `
Unable to retrieve the payment provider with id: ${providerId}
Please make sure that the provider is registered in the container and it is configured correctly in your project configuration file.`;
                throw new Error(errMessage);
            }
            const errMessage = `Unable to retrieve the payment provider with id: ${providerId}, the following error occurred: ${err.message}`;
            __classPrivateFieldGet(this, _PaymentProviderService_logger, "f").error(errMessage);
            throw new Error(errMessage);
        }
    }
    async createSession(providerId, sessionInput) {
        const provider = this.retrieveProvider(providerId);
        const paymentResponse = await provider.initiatePayment(sessionInput);
        if (isPaymentProviderError(paymentResponse)) {
            this.throwPaymentProviderError(paymentResponse);
        }
        return paymentResponse.data;
    }
    async updateSession(providerId, sessionInput) {
        const provider = this.retrieveProvider(providerId);
        const paymentResponse = await provider.updatePayment(sessionInput);
        if (isPaymentProviderError(paymentResponse)) {
            this.throwPaymentProviderError(paymentResponse);
        }
        return paymentResponse?.data;
    }
    async deleteSession(input) {
        const provider = this.retrieveProvider(input.provider_id);
        const error = await provider.deletePayment(input.data);
        if (isPaymentProviderError(error)) {
            this.throwPaymentProviderError(error);
        }
    }
    async authorizePayment(input, context) {
        const provider = this.retrieveProvider(input.provider_id);
        const res = await provider.authorizePayment(input.data, context);
        if (isPaymentProviderError(res)) {
            this.throwPaymentProviderError(res);
        }
        const { data, status } = res;
        return { data, status };
    }
    async getStatus(input) {
        const provider = this.retrieveProvider(input.provider_id);
        return await provider.getPaymentStatus(input.data);
    }
    async capturePayment(input) {
        const provider = this.retrieveProvider(input.provider_id);
        const res = await provider.capturePayment(input.data);
        if (isPaymentProviderError(res)) {
            this.throwPaymentProviderError(res);
        }
        return res;
    }
    async cancelPayment(input) {
        const provider = this.retrieveProvider(input.provider_id);
        const error = await provider.cancelPayment(input.data);
        if (isPaymentProviderError(error)) {
            this.throwPaymentProviderError(error);
        }
    }
    async refundPayment(input, amount) {
        const provider = this.retrieveProvider(input.provider_id);
        const res = await provider.refundPayment(input.data, amount);
        if (isPaymentProviderError(res)) {
            this.throwPaymentProviderError(res);
        }
        return res;
    }
    async listPaymentMethods(providerId, context) {
        const provider = this.retrieveProvider(providerId);
        if (!provider.listPaymentMethods) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `Provider ${providerId} does not support listing payment methods`);
        }
        return await provider.listPaymentMethods(context);
    }
    async savePaymentMethod(providerId, input) {
        const provider = this.retrieveProvider(providerId);
        if (!provider.savePaymentMethod) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `Provider ${providerId} does not support saving payment methods`);
        }
        const res = await provider.savePaymentMethod(input);
        if (isPaymentProviderError(res)) {
            this.throwPaymentProviderError(res);
        }
        return res;
    }
    async getWebhookActionAndData(providerId, data) {
        const provider = this.retrieveProvider(providerId);
        return await provider.getWebhookActionAndData(data);
    }
    throwPaymentProviderError(errObj) {
        throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `${errObj.error}${errObj.detail ? `:${os_1.EOL}${errObj.detail}` : ""}`, errObj.code);
    }
}
_PaymentProviderService_logger = new WeakMap();
exports.default = PaymentProviderService;
function isPaymentProviderError(obj) {
    return (obj &&
        typeof obj === "object" &&
        "error" in obj &&
        "code" in obj &&
        "detail" in obj);
}
//# sourceMappingURL=payment-provider.js.map